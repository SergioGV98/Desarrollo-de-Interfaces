// Generated by view binder compiler. Do not edit!
package com.moronlu18.itemcreation.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import com.moronlu18.itemcreation.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentItemCreationBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button itemCreationBtnSave;

  @NonNull
  public final CheckBox itemCreationChbxTaxable;

  @NonNull
  public final TextInputEditText itemCreationEtDescription;

  @NonNull
  public final EditText itemCreationEtRate;

  @NonNull
  public final LinearLayout itemCreationLlItem;

  @NonNull
  public final Spinner itemCreationSpItemType;

  @NonNull
  public final TextInputLayout itemCreationTieName;

  @NonNull
  public final TextInputEditText itemCreationTiiName;

  @NonNull
  public final TextView itemCreationTvItemList;

  @NonNull
  public final TextView itemCreationTvRate;

  @NonNull
  public final TextView itemCreationTvTaxable;

  private FragmentItemCreationBinding(@NonNull LinearLayout rootView,
      @NonNull Button itemCreationBtnSave, @NonNull CheckBox itemCreationChbxTaxable,
      @NonNull TextInputEditText itemCreationEtDescription, @NonNull EditText itemCreationEtRate,
      @NonNull LinearLayout itemCreationLlItem, @NonNull Spinner itemCreationSpItemType,
      @NonNull TextInputLayout itemCreationTieName, @NonNull TextInputEditText itemCreationTiiName,
      @NonNull TextView itemCreationTvItemList, @NonNull TextView itemCreationTvRate,
      @NonNull TextView itemCreationTvTaxable) {
    this.rootView = rootView;
    this.itemCreationBtnSave = itemCreationBtnSave;
    this.itemCreationChbxTaxable = itemCreationChbxTaxable;
    this.itemCreationEtDescription = itemCreationEtDescription;
    this.itemCreationEtRate = itemCreationEtRate;
    this.itemCreationLlItem = itemCreationLlItem;
    this.itemCreationSpItemType = itemCreationSpItemType;
    this.itemCreationTieName = itemCreationTieName;
    this.itemCreationTiiName = itemCreationTiiName;
    this.itemCreationTvItemList = itemCreationTvItemList;
    this.itemCreationTvRate = itemCreationTvRate;
    this.itemCreationTvTaxable = itemCreationTvTaxable;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentItemCreationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentItemCreationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_item_creation, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentItemCreationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.itemCreation_btnSave;
      Button itemCreationBtnSave = ViewBindings.findChildViewById(rootView, id);
      if (itemCreationBtnSave == null) {
        break missingId;
      }

      id = R.id.itemCreation_chbxTaxable;
      CheckBox itemCreationChbxTaxable = ViewBindings.findChildViewById(rootView, id);
      if (itemCreationChbxTaxable == null) {
        break missingId;
      }

      id = R.id.itemCreation_etDescription;
      TextInputEditText itemCreationEtDescription = ViewBindings.findChildViewById(rootView, id);
      if (itemCreationEtDescription == null) {
        break missingId;
      }

      id = R.id.itemCreation_etRate;
      EditText itemCreationEtRate = ViewBindings.findChildViewById(rootView, id);
      if (itemCreationEtRate == null) {
        break missingId;
      }

      LinearLayout itemCreationLlItem = (LinearLayout) rootView;

      id = R.id.itemCreation_spItemType;
      Spinner itemCreationSpItemType = ViewBindings.findChildViewById(rootView, id);
      if (itemCreationSpItemType == null) {
        break missingId;
      }

      id = R.id.itemCreation_tieName;
      TextInputLayout itemCreationTieName = ViewBindings.findChildViewById(rootView, id);
      if (itemCreationTieName == null) {
        break missingId;
      }

      id = R.id.itemCreation_tiiName;
      TextInputEditText itemCreationTiiName = ViewBindings.findChildViewById(rootView, id);
      if (itemCreationTiiName == null) {
        break missingId;
      }

      id = R.id.itemCreation_tvItemList;
      TextView itemCreationTvItemList = ViewBindings.findChildViewById(rootView, id);
      if (itemCreationTvItemList == null) {
        break missingId;
      }

      id = R.id.itemCreation_tvRate;
      TextView itemCreationTvRate = ViewBindings.findChildViewById(rootView, id);
      if (itemCreationTvRate == null) {
        break missingId;
      }

      id = R.id.itemCreation_tvTaxable;
      TextView itemCreationTvTaxable = ViewBindings.findChildViewById(rootView, id);
      if (itemCreationTvTaxable == null) {
        break missingId;
      }

      return new FragmentItemCreationBinding((LinearLayout) rootView, itemCreationBtnSave,
          itemCreationChbxTaxable, itemCreationEtDescription, itemCreationEtRate,
          itemCreationLlItem, itemCreationSpItemType, itemCreationTieName, itemCreationTiiName,
          itemCreationTvItemList, itemCreationTvRate, itemCreationTvTaxable);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
